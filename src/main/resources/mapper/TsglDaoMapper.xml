<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.ckglixt.dao.TsglMapper">
<!--    &lt;!&ndash;根据编号或者名称判断图书是否存在&ndash;&gt;-->
<!--    <select id="findEixtTs" parameterType="java.lang.String" resultType="java.lang.Integer">-->
<!--	    SELECT-->
<!--	    count(*)-->
<!--		FROM-->
<!--		book-->
<!--		where-->
<!--		name = #{Name}-->
<!--		or-->
<!--		no =#{No}-->
<!--	</select>-->

<!--    &lt;!&ndash;根据ID查找图书&ndash;&gt;-->
<!--    <select id="findTsByIdl" parameterType="java.lang.String" resultType="java.lang.Integer">-->
<!--	    SELECT-->
<!--	    count(*)-->
<!--		FROM-->
<!--		book-->
<!--		where-->
<!--		id= #{id}-->
<!--	</select>-->

<!--    &lt;!&ndash;新增图书分类&ndash;&gt;-->
<!--    <select id="addTsfl" parameterType="com.example.tushu.entity.TsglAddEntity">-->
<!--	    insert into book-->
<!--        (-->
<!--         id,-->
<!--         no,-->
<!--         type_no,-->
<!--         name,-->
<!--         price,-->
<!--         pub_time,-->
<!--         author,-->
<!--         pub_company-->
<!--         )-->
<!--        values-->
<!--           (-->
<!--           	#{id},-->
<!--            #{No},-->
<!--            #{tpyeNo},-->
<!--            #{Name},-->
<!--            #{price},-->
<!--            #{pubTime2},-->
<!--            #{Author},-->
<!--            #{pubCompany}-->
<!--            )-->
<!--	</select>-->

<!--    &lt;!&ndash;删除图书&ndash;&gt;-->
<!--    <select id="deleteTs" parameterType="com.example.ckglixt.requestDTO.TsglDeleteEntity">-->
<!--	    delete from-->
<!--	    book-->
<!--	    where-->
<!--	    book_id = #{id}-->
<!--	</select>-->

<!--    <select id="ListOfTs" resultType="com.example.tushu.entity.TsglAddEntity">-->
<!--	    select-->
<!--	     id id ,-->
<!--         no No,-->
<!--         type_no tpyeNo,-->
<!--         name Name,-->
<!--         price price,-->
<!--         pub_time pubTime2,-->
<!--         author Author,-->
<!--         pub_company pubCompany-->
<!--	    from-->
<!--	    book-->
<!--	</select>-->

<!--    &lt;!&ndash;根据名称是否重复&ndash;&gt;-->
<!--    <select id="judgeRepeat1" parameterType="java.lang.String" resultType="java.lang.Integer">-->
<!--	    select-->
<!--	    count(*)-->
<!--	    from-->
<!--	    book-->
<!--		WHERE-->
<!--		id != #{id}-->
<!--		and-->
<!--		name = #{Name}-->
<!--	</select>-->

<!--    &lt;!&ndash;根据编号是否重复&ndash;&gt;-->
<!--    <select id="judgeRepeat2" parameterType="java.lang.String" resultType="java.lang.Integer">-->
<!--	    select-->
<!--	    count(*)-->
<!--	    from-->
<!--	    book-->
<!--		WHERE-->
<!--		id != #{id}-->
<!--		and-->
<!--		no = #{No}-->
<!--	</select>-->

<!--    &lt;!&ndash;修改图书分类&ndash;&gt;-->
<!--    <select id="updateTs" parameterType="com.example.tushu.entity.TsglAddEntity">-->
<!--	    update-->
<!--        book-->
<!--        set-->
<!--        id   = #{id},-->
<!--         no   = #{No},-->
<!--         type_no = #{tpyeNo},-->
<!--         name = #{Name},-->
<!--         price = #{price},-->
<!--         pub_time = #{pubTime2},-->
<!--         author = #{Author},-->
<!--         pub_company = #{pubCompany}-->
<!--        where-->
<!--        id = #{id}-->
<!--	</select>-->

	<!--采购图书-->
	<insert id="addTs" parameterType="java.util.List">
		insert into cg_book
		(
		id,
		book_name,
		create_time,
		num,
		book_in_type,
		price,
		status
		)
		values
		<foreach collection="list" item="list" index="index" separator=",">
			(
			#{list.id},
			#{list.bookName},
			now(),
			#{list.num},
			#{list.bookInType},
			#{list.price},
			#{list.status}
			)
		</foreach>
	</insert>

	<!--图书列表分页查询-->
	<select id="ListOfTs" resultType="com.example.ckglixt.responseDTO.ListOfCgTsResponseDTO">
		select
		id 				id,
		book_name		bookName,
		create_time		createTime,
		num				num,
		book_in_type	bookInType,
		price			price,
		status			status
		from
		cg_book
		where
		status = 2
	</select>

	<!--采购图书-->
	<insert id="addCk" parameterType="java.util.List">
		insert into book
		(
		book_id,
		book_name,
		create_time,
		num,
		isbn,
		<!--book_in_type,-->
		price
		)
		values
		<foreach collection="list" item="list" index="index" separator=",">
			(
			#{list.id},
			#{list.bookName},
			now(),
			#{list.num},
			#{list.isBn},
			<!--#{list.bookInType},-->
			#{list.price}
			)
		</foreach>
	</insert>

	<!--采购入库操作->更新采购状态-->
	<update id="updateStatus" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
			update cg_book
			set
			status = 1
			where
			id = #{item}
		</foreach>
	</update>

	<!--删除图书-->
	<delete id="deleteTs" parameterType="com.example.ckglixt.requestDTO.TsglDeleteEntity">
		delete from
		book
		where
		book_id in
		<foreach collection="list" item="id" index="index" open="(" separator="," close=")">
			(#{id})
		</foreach>
	</delete>

	<!--根据名称判断图书是否存在-->
	<select id="findBookByName" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT
		count(*)
		FROM
		book
		where
		book_name = #{bookName}
	</select>

	<!--采购入库操作->更新数量-->
	<update id="updateNum">
			update book
			set
			num = num + #{Num},
			update_time = now()
			where
			book_name = #{bookName}
	</update>

	<!--入库图书列表分页查询-->
	<select id="ListOfRkTs" parameterType="com.example.ckglixt.requestDTO.ListUsersRequestDTO" resultType="com.example.ckglixt.responseDTO.ListOfCkTsResponseDTO">
		select
		book_id 				id,
		book_author     bookAuthor,
		book_name		bookName,
		book_press		bookPress,
		isbn			isBn,
		num				Num,
		price			price,
		book_place		bookPlace,
		detail 			detail
		from
		book
		where
		book_id = book_id
		<if test="bookName != null and bookName != ''">
			and book_name like concat('%', #{bookName}, '%')
		</if>
		<if test="bookPress != null and bookPress != ''">
			and book_press like concat('%', #{bookPress}, '%')
		</if>
		<if test="bookAuthor != null and bookAuthor != ''">
			and book_author like concat('%', #{bookAuthor}, '%')
		</if>
	</select>

	<!--修改图书-->
	<update id="updateTs" parameterType="com.example.ckglixt.requestDTO.UpdateTsRequestDTO">
		update
		 book
		set
		 book_author   = #{bookAuthor},
		 book_press    = #{bookPress},
		 price 		   = #{price},
		 num           = #{num},
		 book_place    = #{bookPlace},
		 detail        = #{detail},
		 update_time   = now()
		where
		book_id = #{id}
	</update>
</mapper>